diff --git a/modules/juce_core/native/juce_JNIHelpers_android.h b/modules/juce_core/native/juce_JNIHelpers_android.h
index 65cf0c4eb..d5c7421f6 100644
--- a/modules/juce_core/native/juce_JNIHelpers_android.h
+++ b/modules/juce_core/native/juce_JNIHelpers_android.h
@@ -864,6 +864,14 @@ DECLARE_JNI_CLASS (AndroidSurfaceView, "android/view/SurfaceView")
 DECLARE_JNI_CLASS (AndroidSurfaceHolder, "android/view/SurfaceHolder")
 #undef JNI_CLASS_MEMBERS
 
+#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
+ METHOD (constructor1,     "<init>",     "(Ljava/lang/Runnable;)V") \
+ METHOD (constructor2,     "<init>",     "(Ljava/lang/Runnable;Ljava/lang/String;)V") \
+ METHOD (start,            "start",      "()V") \
+
+    DECLARE_JNI_CLASS (JavaLangThread, "java/lang/Thread")
+#undef JNI_CLASS_MEMBERS
+
 //==============================================================================
 namespace
 {
diff --git a/modules/juce_core/native/juce_SharedCode_posix.h b/modules/juce_core/native/juce_SharedCode_posix.h
index 03313eaa2..5d4f6af30 100644
--- a/modules/juce_core/native/juce_SharedCode_posix.h
+++ b/modules/juce_core/native/juce_SharedCode_posix.h
@@ -974,6 +974,11 @@ static void* makeThreadHandle (PosixThreadAttribute& attr, void* userData, void*
 
 void Thread::closeThreadHandle()
 {
+#if JUCE_ANDROID
+    auto env = getEnv();
+    auto r = (jobject) (void*) threadHandle;
+    env->DeleteGlobalRef(r);
+#endif
     threadId = {};
     threadHandle = nullptr;
 }
diff --git a/modules/juce_core/native/juce_Threads_android.cpp b/modules/juce_core/native/juce_Threads_android.cpp
index efbf3a9f6..3904f5fc6 100644
--- a/modules/juce_core/native/juce_Threads_android.cpp
+++ b/modules/juce_core/native/juce_Threads_android.cpp
@@ -362,6 +362,41 @@ static auto setPriorityOfThisThread (Thread::Priority p)
                         ThreadPriorities::getNativePriority (p)) == 0;
 }
 
+class ThreadTargetRunnable2 : public AndroidInterfaceImplementer
+    {
+        Thread *juceThread;
+        void* (*threadEntryProc) (void*);
+    public:
+        ThreadTargetRunnable2(Thread* juceThread, void* (*threadEntryProc) (void*))
+        : juceThread(juceThread), threadEntryProc(threadEntryProc) {
+        }
+
+        virtual ~ThreadTargetRunnable2() override
+        {
+            if (androidJNIJavaVM != nullptr)
+            {
+                void* env = nullptr;
+                // only detach if we have actually been attached
+                if (androidJNIJavaVM->GetEnv(&env, JNI_VERSION_1_2) == JNI_OK && env != nullptr)
+                    androidJNIJavaVM->DetachCurrentThread();
+            }
+        }
+
+        jobject invoke (jobject proxy, jobject method, jobjectArray args) override
+        {
+            juceThread->threadId = (void*) pthread_self();
+            auto* env = getEnv();
+            auto methodName = juceString ((jstring) env->CallObjectMethod (method, JavaMethod.getName));
+            if (methodName == "run")
+            {
+                threadEntryProc(juceThread);
+                return nullptr;
+            }
+
+            return AndroidInterfaceImplementer::invoke (proxy, method, args);
+        }
+    };
+
 bool Thread::createNativeThread (Priority)
 {
     const auto threadEntryProc = [] (void* userData) -> void*
@@ -372,16 +407,7 @@ bool Thread::createNativeThread (Priority)
 
         juce_threadEntryPoint (myself);
 
-        if (androidJNIJavaVM != nullptr)
-        {
-            void* env = nullptr;
-            androidJNIJavaVM->GetEnv (&env, JNI_VERSION_1_2);
-
-            // only detach if we have actually been attached
-            if (env != nullptr)
-                androidJNIJavaVM->DetachCurrentThread();
-        }
-
+        // Our android Thread is based on java.lang.Thread, do not DetachCurrentThread() at JNI level.
         return nullptr;
     };
 
@@ -400,8 +426,17 @@ bool Thread::createNativeThread (Priority)
     }
 
     PosixThreadAttribute attr { threadStackSize };
-    threadId = threadHandle = makeThreadHandle (attr, this, threadEntryProc);
 
+    auto env = getEnv();
+    auto runnableNative = new ThreadTargetRunnable2(this, threadEntryProc);
+    auto runnable = CreateJavaInterface(runnableNative, "java/lang/Runnable");
+    GlobalRef threadRunnableGRef { runnable };
+    auto name = env->NewStringUTF("ThreadTargetRunnable2");
+    auto threadObj = env->NewObject(JavaLangThread, JavaLangThread.constructor1, threadRunnableGRef.get(), name);
+    jobject threadGRef = env->NewGlobalRef(threadObj);
+    threadId = (ThreadID) pthread_self();
+    env->CallVoidMethod(threadObj, JavaLangThread.start); // must be invoked after threadId is set.
+    threadHandle = threadGRef;
     return threadId != nullptr;
 }
 
diff --git a/modules/juce_core/threads/juce_Thread.h b/modules/juce_core/threads/juce_Thread.h
index 91ebd32a3..bceb5e033 100644
--- a/modules/juce_core/threads/juce_Thread.h
+++ b/modules/juce_core/threads/juce_Thread.h
@@ -606,6 +606,10 @@ private:
     void killThread();
     void threadEntryPoint();
 
+    #if JUCE_ANDROID
+    friend class ThreadTargetRunnable2;
+    #endif
+
     JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Thread)
 };
 
