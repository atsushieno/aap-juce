diff --git a/modules/juce_core/native/juce_android_JNIHelpers.h b/modules/juce_core/native/juce_android_JNIHelpers.h
index bdfa4c388..2e080142d 100644
--- a/modules/juce_core/native/juce_android_JNIHelpers.h
+++ b/modules/juce_core/native/juce_android_JNIHelpers.h
@@ -793,6 +793,14 @@ DECLARE_JNI_CLASS (AndroidSurfaceView, "android/view/SurfaceView")
 DECLARE_JNI_CLASS (AndroidSurfaceHolder, "android/view/SurfaceHolder")
 #undef JNI_CLASS_MEMBERS
 
+#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
+ METHOD (constructor1,     "<init>",     "(Ljava/lang/Runnable;)V") \
+ METHOD (constructor2,     "<init>",     "(Ljava/lang/Runnable;Ljava/lang/String;)V") \
+ METHOD (start,            "start",      "()V") \
+
+    DECLARE_JNI_CLASS (JavaLangThread, "java/lang/Thread")
+#undef JNI_CLASS_MEMBERS
+
 //==============================================================================
 namespace
 {
diff --git a/modules/juce_core/native/juce_posix_SharedCode.h b/modules/juce_core/native/juce_posix_SharedCode.h
index 66ff9669b..e0d35a525 100644
--- a/modules/juce_core/native/juce_posix_SharedCode.h
+++ b/modules/juce_core/native/juce_posix_SharedCode.h
@@ -865,20 +865,45 @@ static void* threadEntryProc (void* userData)
         juce_threadEntryPoint (myself);
     }
 
-   #if JUCE_ANDROID
-    if (androidJNIJavaVM != nullptr)
+    return nullptr;
+}
+
+#if JUCE_ANDROID
+    class ThreadTargetRunnable : public AndroidInterfaceImplementer
     {
-        void* env = nullptr;
-        androidJNIJavaVM->GetEnv(&env, JNI_VERSION_1_2);
+        Thread *juce_thread;
+    public:
+        ThreadTargetRunnable(Thread *juceThread) : juce_thread(juceThread) {}
 
-        // only detach if we have actually been attached
-        if (env != nullptr)
-            androidJNIJavaVM->DetachCurrentThread();
-    }
-   #endif
+        virtual ~ThreadTargetRunnable()
+        {
+            if (androidJNIJavaVM != nullptr)
+            {
+                void* env = nullptr;
+                // only detach if we have actually been attached
+                if (androidJNIJavaVM->GetEnv(&env, JNI_VERSION_1_2) == JNI_OK && env != nullptr)
+                    androidJNIJavaVM->DetachCurrentThread();
+            }
+        }
 
-    return nullptr;
-}
+        jobject invoke (jobject proxy, jobject method, jobjectArray args) override
+        {
+            auto* env = getEnv();
+
+            auto methodName = juceString ((jstring) env->CallObjectMethod (method, JavaMethod.getName));
+
+            if (methodName == "run")
+            {
+                juce_thread->threadHandle.set((void*) pthread_self());
+                juce_thread->threadId = (Thread::ThreadID) juce_thread->threadHandle.get();
+                threadEntryProc(juce_thread);
+                return nullptr;
+            }
+
+            return AndroidInterfaceImplementer::invoke (proxy, method, args);
+        }
+    };
+#endif
 
 #if JUCE_ANDROID && JUCE_MODULE_AVAILABLE_juce_audio_devices && (JUCE_USE_ANDROID_OPENSLES || JUCE_USE_ANDROID_OBOE)
  #define JUCE_ANDROID_REALTIME_THREAD_AVAILABLE 1
@@ -909,6 +934,17 @@ void Thread::launchThread()
     pthread_attr_t attr;
     pthread_attr_t* attrPtr = nullptr;
 
+#if JUCE_ANDROID
+    auto env = getEnv();
+    auto runnableNative = new ThreadTargetRunnable(this);
+    auto runnable = CreateJavaInterface(runnableNative, "java/lang/Runnable");
+    GlobalRef threadRunnableGRef { runnable };
+    auto name = env->NewStringUTF("ThreadTargetRunnable");
+    auto threadObj = env->NewObject(JavaLangThread, JavaLangThread.constructor1, threadRunnableGRef.get(), name);
+    GlobalRef threadGRef { LocalRef<jobject>(threadObj) };
+    javaThreadPeer = threadGRef;
+    env->CallVoidMethod(threadGRef.get(), JavaLangThread.start);
+#else
     if (pthread_attr_init (&attr) == 0)
     {
         attrPtr = &attr;
@@ -925,6 +961,7 @@ void Thread::launchThread()
 
     if (attrPtr != nullptr)
         pthread_attr_destroy (attrPtr);
+#endif
 }
 
 void Thread::closeThreadHandle()
diff --git a/modules/juce_core/threads/juce_Thread.h b/modules/juce_core/threads/juce_Thread.h
index 19634d678..2f751c3e0 100644
--- a/modules/juce_core/threads/juce_Thread.h
+++ b/modules/juce_core/threads/juce_Thread.h
@@ -381,6 +381,9 @@ public:
    #endif
 
 private:
+    #if JUCE_ANDROID
+    friend class ThreadTargetRunnable; // needs to access threadHandle
+    #endif
     //==============================================================================
     const String threadName;
     Atomic<void*> threadHandle { nullptr };
@@ -396,6 +399,7 @@ private:
 
    #if JUCE_ANDROID
     bool isAndroidRealtimeThread = false;
+    /*GlobalRef*/ void* javaThreadPeer { nullptr };
    #endif
 
    #ifndef DOXYGEN
