# ------------------------------------------------------------------------
# This file is supposed to be included from the main project Makefile.
# ------------------------------------------------------------------------


# Beginning of user configuration -------------------------------

# General build configuration -----------------------------------
## Specify path to overriden jucer file.
ifeq ('$(APP_CUSTOM_JUCER)', '')
APP_CUSTOM_JUCER=$(shell pwd)/apps/override.$(APP_NAME).jucer
endif

ifeq ('$(APP_DST_JUCER)', '')
APP_DST_JUCER=$(APP_NAME).jucer
endif

# Specify path to copy destination, if different from APP_BUILD_DIR. e.g. apps/vital/standalone
ifeq ('$(APP_COPY_DIR)', '')
APP_COPY_DIR=$(APP_BUILD_DIR)
endif

## Specify path to aap-juce. The default is the submodule path.
ifeq ('$(AAP_JUCE_DIR)', '')
AAP_JUCE_DIR=$(shell pwd)/aap-juce
endif

## Specify path to juce. The default is the submodule path.
ifeq ('$(JUCE_DIR)', '')
JUCE_DIR=$(shell pwd)/external/JUCE
endif

## Specify path to aap core. The default is the submodule path.
AAP_DIR=$(shell pwd)/external/android-audio-plugin-framework

## If the build output is going to be too huge to keep, use this flag to delete.
MINIMIZE_INTERMEDIATES=0

## Specify arbitrary NDK version. No guarantee on that your version works.
NDK_VERSION=21.4.7075529

## Specify whatever gradle task you want to run.
GRADLE_TASK=build


## dist directory to collect build artifacts
DIST_DIR=$(shell pwd)/release-builds

# End of user configuration. ------------------------------------

THISFILE=$(abspath $(lastword $(MAKEFILE_LIST)))
THISDIR=$(dir $(THISFILE))

ifeq ('$(ANDROID_SDK_ROOT)', '')
ANDROID_SDK_ROOT=~/Android/Sdk
endif

PROJUCER_BIN_LINUX=$(JUCE_DIR)/extras/Projucer/Builds/LinuxMakefile/build/Projucer
PROJUCER_BIN_DARWIN=$(JUCE_DIR)/extras/Projucer/Builds/MacOSX/build/Debug/Projucer.app/Contents/MacOS/Projucer

ANDROID_DIR=$(APP_BUILD_DIR)/Builds/Android

ifeq ($(shell uname), Linux)
	PROJUCER_BIN=$(PROJUCER_BIN_LINUX)
else
ifeq ($(shell uname), Darwin)
	PROJUCER_BIN=$(PROJUCER_BIN_DARWIN)
else
	PROJUCER_BIN=___error___
endif
endif


.PHONY:
all: build

.PHONY:
build: prepare build-aap build-target-app

.PHONY:
prepare: build-projucer

.PHONY:
build-projucer: $(PROJUCER_BIN)
	@echo "Projucer target: $(PROJUCER_BIN)"

$(PROJUCER_BIN_LINUX):
	make -C $(JUCE_DIR)/extras/Projucer/Builds/LinuxMakefile
	if [ $(MINIMIZE_INTERMEDIATES) ] ; then \
		rm -rf $(JUCE_DIR)/extras/Projucer/Builds/LinuxMakefile/build/intermediate/ ; \
	fi

$(PROJUCER_BIN_DARWIN):
	xcodebuild -project $(JUCE_DIR)/extras/Projucer/Builds/MacOSX/Projucer.xcodeproj
	if [ $(MINIMIZE_INTERMEDIATES) ] ; then \
		rm -rf $(JUCE_DIR)/extras/Projucer/Builds/MacOSX/build/intermediate/ ; \
	fi

.PHONY:
build-aap:
	if [ ! -f $(AAP_DIR)/local.properties ] ; then \
		echo "sdk.dir=$(HOME)/Android/Sdk" > $(AAP_DIR)/local.properties ; \
	fi
	cd $(AAP_DIR) && ./gradlew build

.PHONY:
dist:
	mkdir -p $(DIST_DIR)
	cp  $(APP_BUILD_DIR)/Builds/Android/app/build/outputs/apk/release_/release/app-release_-release.apk  $(DIST_DIR)/$(APP_NAME)-release.apk


.PHONY:
build-target-app: copy-and-patch-app-sources projuce-app do-build-target-android
build-target-desktop: copy-and-patch-app-sources projuce-app do-build-target-desktop

.PHONY:
do-build-target-desktop:
	echo "PROJUCER is at $(PROJUCER_BIN)"
	cd $(APP_BUILD_DIR) && \
		APPNAME=$(APP_NAME) \
		PROJUCER=$(PROJUCER_BIN) \
		BUILDS_DIR=$(BUILDS_DIR) \
		PLAT_BUILD_DIR=$(PLAT_BUILD_DIR) \
		$(AAP_JUCE_DIR)/build-desktop.sh $(APP_DST_JUCER)

.PHONY:
copy-and-patch-app-sources: $(APP_COPY_DIR)/.stamp 

$(APP_COPY_DIR)/.stamp: \
		$(APP_SRC_DIR)/** \
		$(APP_CUSTOM_JUCER) \
		$(AAP_JUCE_DIR)/sample-project.*
	$(AAP_JUCE_DIR)/copy-and-patch-app-sources.sh  $(APP_NAME)  $(APP_SRC_DIR) \
		$(APP_COPY_DIR)  $(PATCH_FILE)  $(PATCH_DEPTH)  $(APP_CUSTOM_JUCER) $(APP_BUILD_DIR)
	if [ ! -L $(APP_COPY_DIR)/modules ] ; then \
		ln -s $(AAP_JUCE_DIR)/modules $(APP_COPY_DIR)/modules ; \
	fi
	if [ ! -L $(APP_COPY_DIR)/juce-modules ] ; then \
		ln -s $(JUCE_DIR)/modules $(APP_COPY_DIR)/juce-modules ; \
	fi
	if [ ! -L $(APP_COPY_DIR)/android-audio-plugin-framework ] ; then \
		ln -s $(AAP_DIR) $(APP_COPY_DIR)/android-audio-plugin-framework ; \
	fi

.PHONY:
projuce-app: $(EXTERNAL_PRE_PROJUCE_TASKS) do-projuce-app $(EXTERNAL_POST_PROJUCE_TASKS)

.PHONY:
do-projuce-app:
	echo "PROJUCER is at $(PROJUCER_BIN)"
	cd $(APP_BUILD_DIR) && \
		NDK_VERSION=$(NDK_VERSION) \
		APPNAME=$(APP_NAME) \
		PROJUCER=$(PROJUCER_BIN) \
		AAP_METADATA_XML_SOURCE=$(AAP_METADATA_XML_SOURCE) \
		ENABLE_MIDI_DEVICE_SERVICE=$(ENABLE_MIDI_DEVICE_SERVICE) \
		$(AAP_JUCE_DIR)/projuce-app.sh $(APP_DST_JUCER)

.PHONY:
do-build-target-android:
	cd $(ANDROID_DIR) && ./gradlew $(GRADLE_TASK) && cd ../.. || exit 1
	if [ $(MINIMIZE_INTERMEDIATES) ] ; then \
		rm -rf $(ANDROID_DIR)/app/build/intermediates/ ; \
		rm -rf $(ANDROID_DIR)/app/.cxx ; \
	fi

# Independent Tasks that have to be performed manually

.PHONY:
update-aap-metadata: build-target-desktop
	#if [ '`uname`' = 'Darwin' ] ; then \
	#	cd $(APP_BUILD_DIR) && APPNAME=$(MACAPPNAME) EXTRA_OUTDIR=Builds/Android $(THISDIR)/generate-metadata.sh || exit 1 ; \
	#else \
		cd $(APP_BUILD_DIR) && \
		APPNAME=$(APP_NAME) \
		EXTRA_OUTDIR=Builds/Android \
		BUILDS_DIR=$(BUILDS_DIR) \
		PLAT_BUILD_DIR=$(PLAT_BUILD_DIR) \
		LIBFILES=$(LIBFILES) \
		EXTRA_LDFLAGS=$(METADATA_GENERATOR_EXTRA_LDFLAGS) \
		$(THISDIR)/generate-metadata.sh || exit 1 ; \
	#fi

.PHONY:
update-aap-metadata-cmake:
	mkdir -p $(APP_SRC_DIR)/build-desktop
	cd $(APP_SRC_DIR)/build-desktop && cmake .. && make && cd $(CURDIR)
	APPNAME=$(APP_NAME) \
	EXTRA_OUTDIR=. \
	LIBRARY=lib$(APP_NAME)_Standalone.so \
	ENTRYPOINT=GetJuceAAPFactoryStandalone \
	LIBFILES="$(APP_SRC_DIR)/build-desktop/$(APP_NAME)_artefacts/lib$(APP_NAME)_SharedCode.a external/$(APP_NAME)/build-desktop/lib$(APP_NAME)Data.a" \
	EXTRA_LDFLAGS=$(METADATA_GENERATOR_EXTRA_LDFLAGS) \
	BUILDS_DIR=$(BUILDS_DIR) \
	PLAT_BUILD_DIR=$(PLAT_BUILD_DIR) \
	$(AAP_JUCE_DIR)/generate-metadata.sh 
