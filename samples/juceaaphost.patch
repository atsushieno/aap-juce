diff --git a/extras/AudioPluginHost/Source/HostStartup.cpp b/extras/AudioPluginHost/Source/HostStartup.cpp
index 3e7cc7096..efd3044fd 100644
--- a/extras/AudioPluginHost/Source/HostStartup.cpp
+++ b/extras/AudioPluginHost/Source/HostStartup.cpp
@@ -28,7 +28,7 @@
 #include "Plugins/InternalPlugins.h"
 
 #if ! (JUCE_PLUGINHOST_VST || JUCE_PLUGINHOST_VST3 || JUCE_PLUGINHOST_AU)
- #error "If you're building the audio plugin host, you probably want to enable VST and/or AU support"
+// #error "If you're building the audio plugin host, you probably want to enable VST and/or AU support"
 #endif
 
 
diff --git a/extras/AudioPluginHost/Source/Plugins/InternalPlugins.cpp b/extras/AudioPluginHost/Source/Plugins/InternalPlugins.cpp
index 59f23168d..e9d4e477c 100644
--- a/extras/AudioPluginHost/Source/Plugins/InternalPlugins.cpp
+++ b/extras/AudioPluginHost/Source/Plugins/InternalPlugins.cpp
@@ -421,15 +421,15 @@ InternalPluginFormat::InternalPluginFormat()
         [] { return std::make_unique<InternalPlugin> (std::make_unique<SineWaveSynth>()); },
         [] { return std::make_unique<InternalPlugin> (std::make_unique<ReverbPlugin>()); },
 
-        [] { return std::make_unique<InternalPlugin> (std::make_unique<AUv3SynthProcessor>()); },
+        //[] { return std::make_unique<InternalPlugin> (std::make_unique<AUv3SynthProcessor>()); },
         [] { return std::make_unique<InternalPlugin> (std::make_unique<Arpeggiator>()); },
-        [] { return std::make_unique<InternalPlugin> (std::make_unique<DspModulePluginDemoAudioProcessor>()); },
+        //[] { return std::make_unique<InternalPlugin> (std::make_unique<DspModulePluginDemoAudioProcessor>()); },
         [] { return std::make_unique<InternalPlugin> (std::make_unique<GainProcessor>()); },
         [] { return std::make_unique<InternalPlugin> (std::make_unique<JuceDemoPluginAudioProcessor>()); },
         [] { return std::make_unique<InternalPlugin> (std::make_unique<MidiLoggerPluginDemoProcessor>()); },
-        [] { return std::make_unique<InternalPlugin> (std::make_unique<MultiOutSynth>()); },
+        //[] { return std::make_unique<InternalPlugin> (std::make_unique<MultiOutSynth>()); },
         [] { return std::make_unique<InternalPlugin> (std::make_unique<NoiseGate>()); },
-        [] { return std::make_unique<InternalPlugin> (std::make_unique<SamplerAudioProcessor>()); },
+        //[] { return std::make_unique<InternalPlugin> (std::make_unique<SamplerAudioProcessor>()); },
         [] { return std::make_unique<InternalPlugin> (std::make_unique<SurroundProcessor>()); }
     }
 {
diff --git a/extras/AudioPluginHost/Source/UI/GraphEditorPanel.cpp b/extras/AudioPluginHost/Source/UI/GraphEditorPanel.cpp
index b8bdc95e0..e52fd8b53 100644
--- a/extras/AudioPluginHost/Source/UI/GraphEditorPanel.cpp
+++ b/extras/AudioPluginHost/Source/UI/GraphEditorPanel.cpp
@@ -27,9 +27,10 @@
 #include "GraphEditorPanel.h"
 #include "../Plugins/InternalPlugins.h"
 #include "MainHostWindow.h"
+#include "../../../../modules/juceaap_audio_plugin_processors/juce_android_audio_plugin_format.h"
 
 //==============================================================================
-#if JUCE_IOS
+#if JUCE_IOS || JUCE_ANDROID
  class AUScanner
  {
  public:
@@ -44,7 +45,13 @@
 
  private:
      KnownPluginList& knownPluginList;
+#if JUCE_IOS
      AudioUnitPluginFormat formatToScan;
+#else
+#if JUCE_ANDROID
+     juceaap::AndroidAudioPluginFormat formatToScan;
+#endif
+#endif
 
      std::unique_ptr<PluginDirectoryScanner> scanner;
      FileSearchPath paths;
@@ -1097,7 +1104,7 @@ struct GraphDocumentComponent::PluginListBoxModel    : public ListBoxModel,
         knownPlugins.addChangeListener (this);
         owner.addMouseListener (this, true);
 
-       #if JUCE_IOS
+       #if JUCE_IOS || JUCE_ANDROID
         scanner.reset (new AUScanner (knownPlugins));
        #endif
     }
@@ -1146,7 +1153,7 @@ struct GraphDocumentComponent::PluginListBoxModel    : public ListBoxModel,
 
     bool isOverSelectedRow = false;
 
-   #if JUCE_IOS
+   #if JUCE_IOS || JUCE_ANDROID
     std::unique_ptr<AUScanner> scanner;
    #endif
 
diff --git a/extras/AudioPluginHost/Source/UI/MainHostWindow.cpp b/extras/AudioPluginHost/Source/UI/MainHostWindow.cpp
index dfd4927c8..e6b11adbd 100644
--- a/extras/AudioPluginHost/Source/UI/MainHostWindow.cpp
+++ b/extras/AudioPluginHost/Source/UI/MainHostWindow.cpp
@@ -26,6 +26,7 @@
 #include <JuceHeader.h>
 #include "MainHostWindow.h"
 #include "../Plugins/InternalPlugins.h"
+#include "../../../../modules/juceaap_audio_plugin_processors/juce_android_audio_plugin_format.h"
 
 
 //==============================================================================
@@ -79,6 +80,8 @@ MainHostWindow::MainHostWindow()
 {
     formatManager.addDefaultFormats();
     formatManager.addFormat (new InternalPluginFormat());
+    aap::getPluginHostPAL()->setPluginListCache(aap::getPluginHostPAL()->getInstalledPlugins());
+    formatManager.addFormat (new juceaap::AndroidAudioPluginFormat());
 
     auto safeThis = SafePointer<MainHostWindow> (this);
     RuntimePermissions::request (RuntimePermissions::recordAudio,
@@ -214,6 +217,7 @@ void MainHostWindow::changeListenerCallback (ChangeBroadcaster* changed)
     {
         menuItemsChanged();
 
+#if !ANDROID // FIXME: this premises that plugin query results can be manually updated, which does not apply to Android app.
         // save the plugin list every time it gets changed, so that if we're scanning
         // and it crashes, we've still saved the previous ones
         if (auto savedPluginList = std::unique_ptr<XmlElement> (knownPluginList.createXml()))
@@ -221,6 +225,7 @@ void MainHostWindow::changeListenerCallback (ChangeBroadcaster* changed)
             getAppProperties().getUserSettings()->setValue ("pluginList", savedPluginList.get());
             getAppProperties().saveIfNeeded();
         }
+#endif
     }
     else if (graphHolder != nullptr && changed == graphHolder->graph.get())
     {
diff --git a/modules/juce_audio_devices/native/juce_android_Oboe.cpp b/modules/juce_audio_devices/native/juce_android_Oboe.cpp
index d3d7c2370..9284ac117 100644
--- a/modules/juce_audio_devices/native/juce_android_Oboe.cpp
+++ b/modules/juce_audio_devices/native/juce_android_Oboe.cpp
@@ -1261,7 +1261,7 @@ public:
             case 22:  return "USB headset";
             case 23:  return "hearing aid";
             case 24:  return "built-in speaker safe";
-            default:  jassertfalse; return {}; // type not supported yet, needs to be added!
+            default:  return {}; // type not supported yet, needs to be added!
         }
     }
 
